*SQL Adventure Works Analysis*
/* I just finished utilizing Adventure Works Data for a SQL project. In this project.
I had the amazing chance to delve into the Adventure Works database, examine its huge dataset, and 
use SQL's power to extract insightful data.*/


--Creating and Merging the Sales to get the Total Revenue generated
SELECT Sales.*,
		ProductPrice, 
		ROUND(OrderQuantity*ProductPrice,2) AS Amount
INTO Orders
FROM (	SELECT * FROM Sales_2020
		UNION ALL 
		SELECT * FROM Sales_2021
		UNION ALL
		SELECT * FROM Sales_2022
) AS Sales
		JOIN Product ON Sales.ProductKey = Product.ProductKey


-- 1
--Retrieve the customers who have placed orders with a total amount greater than $10000
SELECT Customers.CustomerKey,CONCAT(Customers.FirstName,' ',Customers.LastName) AS FullName
FROM Customers
JOIN Orders ON customers.CustomerKey = Orders.CustomerKey
GROUP BY Customers.CustomerKey,CONCAT(Customers.FirstName,' ',Customers.LastName)
HAVING SUM(Orders.Amount) > 10000


--2
--Retrieve the total revenue and total orders generated by each product category
SELECT Product_Categories.CategoryName, 
       SUM(Orders.Amount) AS Total_Revenue, 
       COUNT(Orders.CustomerKey) AS Total_Orders
FROM Product_Categories 
		JOIN Product_Subcategories ON Product_Categories.ProductCategoryKey = Product_Subcategories.ProductCategoryKey
		JOIN Product  ON Product_Subcategories.ProductSubcategoryKey = Product.ProductSubcategoryKey
		LEFT JOIN Orders  ON Product.ProductKey = Orders.ProductKey
GROUP BY Product_Categories.CategoryName


--3
/* Retrieve the names of products, sub-categories and their categories for 
products with a selling price greater than the average selling price of all 
products. - SQ */ 
SELECT 
	Product.ProductName, 
	Product_Subcategories.SubcategoryName, 
	Product_Categories.CategoryName
FROM 
	Product
JOIN 
	Product_Subcategories  ON Product.ProductSubcategoryKey = Product_Subcategories.ProductSubcategoryKey
JOIN 
	Product_Categories  ON Product_Subcategories.ProductCategoryKey = Product_Categories.ProductCategoryKey
WHERE Product.ProductPrice > (
		SELECT AVG(ProductPrice) FROM Product)



--4
--How many customers have placed orders in “Canada”? List the customer names 
SELECT CONCAT(Customers.FirstName,' ',Customers.LastName) AS FullName
FROM Customers
	WHERE CustomerKey IN (
		 SELECT DISTINCT CustomerKey
		 FROM Orders
		 JOIN Territory ON Orders.TerritoryKey = Territory.SalesTerritoryKey
		 WHERE Territory.Country = 'Canada')



SELECT COUNT(DISTINCT(Customers.CustomerKey)) AS Total_Customers
FROM Customers
JOIN Orders ON Customers.CustomerKey = Orders.CustomerKey
JOIN Territory ON Orders.TerritoryKey = Territory.SalesTerritoryKey
		 WHERE Territory.Country = 'Canada'



--5
--Find the 10 products that have been returned the most. How much money was generated by these products?
SELECT
    Product.ProductName ,Product.ProductKey ,Product.ProductPrice ,
    ROUND((Product.ProductPrice * ReturnedQuantity),2) AS Total_Generated
FROM Product
JOIN (SELECT 
	   TOP 10
       ProductKey,
       SUM(ReturnQuantity) AS ReturnedQuantity
FROM Returns
GROUP BY ProductKey
ORDER BY
      SUM(ReturnQuantity) DESC
    ) Returns 
	ON Product.ProductKey = Returns.ProductKey
ORDER BY 
	Total_Generated DESC


--6
--Get a list of customers who have placed orders in more than one territory
SELECT  CONCAT(Customers.FirstName,' ',Customers.LastName) AS FullName
FROM Customers 
JOIN Orders ON Customers.CustomerKey = Orders.CustomerKey
JOIN Territory ON Orders.TerritoryKey = Territory.SalesTerritoryKey
GROUP BY  CONCAT(Customers.FirstName,' ',Customers.LastName)
HAVING COUNT(DISTINCT Orders.TerritoryKey)> 1


--7
/*Retrieve the product names and their corresponding sub-categories for 
products that have been ordered at least 10 times.*/
SELECT Product.ProductName, Product_Subcategories.SubcategoryName
FROM Product
JOIN Orders ON Product.ProductKey = Orders.ProductKey
JOIN Product_Subcategories ON Product.ProductSubcategoryKey = Product_Subcategories.ProductSubcategoryKey
GROUP BY Product.ProductName, Product_Subcategories.SubcategoryName
HAVING COUNT(Orders.OrderQuantity) >= 10


--8 
/*List the customer names who have placed orders after 2021. What is the 
distribution of their occupation?*/
SELECT CONCAT(Customers.FirstName,' ',Customers.LastName) AS FullName, 
		Customers.Occupation,
		COUNT(*) as Total_Orders
FROM Customers
		JOIN Orders ON Customers.CustomerKey = Orders.CustomerKey
		WHERE Orders.OrderDate > '2021-01-01'
GROUP BY CONCAT(Customers.FirstName,' ',Customers.LastName), Customers.Occupation


--9
/*Get a list of products and their corresponding order quantities for products 
that have been ordered at least 5 times.*/
SELECT Product.ProductName, Orders.OrderQuantity
FROM Product
JOIN Orders ON Product.ProductKey = Orders.ProductKey
GROUP BY Product.ProductName, Orders.OrderQuantity
HAVING COUNT(Orders.ProductKey) >= 5


--10
/*.Retrieve the product names that start with the letter "C" or “H” and are 
from the "Clothing" category*/
SELECT DISTINCT ProductName
FROM Product
	JOIN Product_Subcategories ON 
		Product.ProductSubcategoryKey = Product_Subcategories.ProductSubcategoryKey
	JOIN Product_Categories ON 
		Product_Subcategories.ProductCategoryKey = Product_Categories.ProductCategoryKey
WHERE Product_Categories.CategoryName = 'Clothing' AND (Product.ProductName LIKE 'C%' OR Product.ProductName LIKE 'H%')

--11
/*Retrieve the product names that have been ordered in the ‘United States’ 
or "Australia".*/
SELECT  Product.ProductName
FROM Product
JOIN Orders ON Orders.ProductKey = Product.ProductKey
JOIN Territory ON Orders.TerritoryKey = Territory.SalesTerritoryKey
WHERE Territory.Country IN ('United States','Australia')


----12
/*Find the customer names who have placed orders with a total amount 
greater than the average total amount of orders.*/
SELECT
    CONCAT(Customers.FirstName,' ',Customers.LastName) AS Fullname
FROM
    Customers
JOIN (SELECT
			CustomerKey,
			SUM(Amount) AS TotalAmount
			FROM Orders
			GROUP BY CustomerKey
    ) 
Orders ON Customers.CustomerKey = Orders.CustomerKey
WHERE Orders.TotalAmount > (
      SELECT AVG(TotalAmount)
      FROM (
			SELECT
            CustomerKey,
            SUM(Amount) AS TotalAmount
            FROM Orders
            GROUP BY CustomerKey
        ) AS AvgOrders);


  
--13
/*Retrieve the top 5 customers who have placed the highest number of orders, 
along with their order counts.*/

SELECT TOP 5 CONCAT(Customers.FirstName,' ',Customers.LastName) AS FullName,
		COUNT(Orders.CustomerKey) AS Total_Orders
FROM Customers
		JOIN Orders ON Customers.CustomerKey = Orders.CustomerKey
GROUP BY CONCAT(Customers.FirstName,' ',Customers.LastName)
ORDER BY Total_Orders DESC

--14
/*List the customers who have placed orders within the last 6 months
(consider the last date in the data)*/
SELECT DISTINCT CONCAT(Customers.FirstName,' ',Customers.LastName) AS FullName
FROM Customers
JOIN Orders ON Customers.CustomerKey = Orders.CustomerKey
WHERE Orders.OrderDate >= DATEADD(MONTH, -6, (SELECT MAX(OrderDate) FROM Orders))

--15
/*We want to reach out to our best customers in 2022. Can you get emails of 
Top 50 customers based on revenue?*/
SELECT TOP 50 Customers.EmailAddress,CONCAT(Customers.FirstName,' ',Customers.LastName) AS FullName
FROM Customers
JOIN Orders ON Customers.CustomerKey = Orders.CustomerKey
WHERE Orders.OrderDate >= '2022-01-01' AND Orders.OrderDate <= '2022-12-31'
GROUP BY Customers.EmailAddress,CONCAT(Customers.FirstName,' ',Customers.LastName)
ORDER BY SUM(Orders.Amount) DESC;
